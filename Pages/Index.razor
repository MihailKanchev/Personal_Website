@page "/"
@inject HttpClient Http
@using Microsoft.Extensions.Configuration;
@using Models;
@using BlazorAnimate;
@inject IConfiguration Configuration

@if (allPosts == null)
{
    <p>Loading..</p>
}
else
{
<div>
    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">

        @*//Logo*@
        <div id="wrapper" class="mt-5">
            <img class="rounded-pill mx-auto d-block mb-3 mw-5 opacity-50 transform hover:scale-110 hover:opacity-100 duration-500 hover" src="@logo?w=250&h=250" alt="logo">
            <p class="text text-center justify-content-center"><b>Mihail Kanchev</b></p>
        </div>

        @*//Navbar*@
        <div class="container text-center justify-content-center pb-3">

            <button type="button" class="text-white bg-green-600 bg-opacity-75 rounded-pill m-2 transform duration-500 hover hover:scale-125"
                    style="border: 0px; outline: 0px;" @onclick="() => SetFilter(0)">
                <p class="p-2"><b>All</b></p>
            </button>

            <button type="button" class="text-white bg-green-600 bg-opacity-75 rounded-pill m-2 transform duration-500 hover hover:scale-125"
                    style="border: 0px; outline: 0px;" @onclick="() => SetFilter(1)">
                <p class="p-2"><b>Machine Learning</b></p>
            </button>

            <button type="button" class="text-white bg-green-600 bg-opacity-75 rounded-pill m-2 transform duration-500 hover hover:scale-125"
                    style="border: 0px; outline: 0px;" @onclick="() => SetFilter(2)">
                <p class="p-2"><b>Unity</b></p>
            </button>

            <button type="button" class="text-white bg-green-600 bg-opacity-75 rounded-pill m-2 transform duration-500 hover hover:scale-125"
                    style="border: 0px; outline: 0px;" @onclick="() => SetFilter(3)">
                <p class="p-2"><b>Other</b></p>
            </button>

        </div>

        @*//Blogposts*@
        @if (filter == 0)
        {
            <Animate Animation="Animations.SlideUp" Duration="TimeSpan.FromSeconds(0.5)">
                <section class="text-white body-font">
                    <div class="container px-5 pb-24 mx-auto">
                        <div class="flex flex-wrap -m-4">

                            @foreach (var post in all)
                            {
                                <a class="p-4 md:w-1/3" href="@($"post/{post.Slug}")">

                                    <div class="h-full border-2 border-green-200 rounded-lg overflow-hidden hover-overlay shadow text-center transform hover:scale-110 motion-reduce:transform-none duration-500">
                                        <img class="h-48 w-full object-cover object-center" src="@post.Metadata.hero.imgix_url?w=720" alt="@post.Title">
                                        <div class="p-6">
                                            <h1 class="text-white title-font text-lg font-medium mb-3"><b>@post.Title</b></h1>
                                        </div>
                                    </div>
                                </a>
                            }
                        </div>
                    </div>
                </section>
            </Animate>
        }
        @if (filter == 1)
        {
            <Animate Animation="Animations.SlideLeft" Duration="TimeSpan.FromSeconds(0.5)">
                <section class="text-white body-font">
                    <div class="container px-5 pb-24 mx-auto">
                        <div class="flex flex-wrap -m-4">

                            @foreach (var post in ml)
                            {
                                <a class="p-4 md:w-1/3" href="@($"post/{post.Slug}")">

                                    <div class="h-full border-2 border-green-200 rounded-lg overflow-hidden hover-overlay shadow text-center transform hover:scale-110 motion-reduce:transform-none duration-500">
                                        <img class="h-48 w-full object-cover object-center" src="@post.Metadata.hero.imgix_url?w=720" alt="@post.Title">
                                        <div class="p-6">
                                            <h1 class="text-white title-font text-lg font-medium mb-3"><b>@post.Title</b></h1>
                                        </div>
                                    </div>
                                </a>
                            }
                        </div>
                    </div>
                </section>
            </Animate>
        }
        @if (filter == 2)
        {
            <Animate Animation="Animations.SlideLeft" Duration="TimeSpan.FromSeconds(0.5)">
                <section class="text-white body-font">
                    <div class="container px-5 pb-24 mx-auto">
                        <div class="flex flex-wrap -m-4">

                            @foreach (var post in gmd)
                            {
                                <a class="p-4 md:w-1/3" href="@($"post/{post.Slug}")">

                                    <div class="h-full border-2 border-green-200 rounded-lg overflow-hidden hover-overlay shadow text-center transform hover:scale-110 motion-reduce:transform-none duration-500">
                                        <img class="h-48 w-full object-cover object-center" src="@post.Metadata.hero.imgix_url?w=720" alt="@post.Title">
                                        <div class="p-6">
                                            <h1 class="text-white title-font text-lg font-medium mb-3"><b>@post.Title</b></h1>
                                        </div>
                                    </div>
                                </a>
                            }
                        </div>
                    </div>
                </section>
            </Animate>
        }
        @if (filter == 3)
        {
            <Animate Animation="Animations.SlideLeft" Duration="TimeSpan.FromSeconds(0.5)">
                <section class="text-white body-font">
                    <div class="container px-5 pb-24 mx-auto">
                        <div class="flex flex-wrap -m-4">

                            @foreach (var post in other)
                            {
                                <a class="p-4 md:w-1/3" href="@($"post/{post.Slug}")">

                                    <div class="h-full border-2 border-green-200 rounded-lg overflow-hidden hover-overlay shadow text-center transform hover:scale-110 motion-reduce:transform-none duration-500">
                                        <img class="h-48 w-full object-cover object-center" src="@post.Metadata.hero.imgix_url?w=720" alt="@post.Title">
                                        <div class="p-6">
                                            <h1 class="text-white title-font text-lg font-medium mb-3"><b>@post.Title</b></h1>
                                        </div>
                                    </div>
                                </a>
                            }
                        </div>
                    </div>
                </section>
            </Animate>
        }
        <div id="footer">
            <p class="p-2 text-white text-center">
                2021 Mihail Kanchev - Powered by <b>Blazor</b>, <b>Cosmic</b>, <b>Nginx</b> and <b>Raspberry Pi</b>
            </p>
        </div>
    </Animate>
</div>

    }
    @code {
        //Lists to store content from  CMS
        private AllPost allPosts = null;
        private List<Post> ml = new List<Post>(), gmd = new List<Post>(), other = new List<Post>(), all = new List<Post>();

        //Link to the profile logo image
        private String logo = null;

        int filter;

        protected override async Task OnInitializedAsync()
        {
            string cosmic_bucket_slug = Configuration["AppSettings:COSMIC_BUCKET_SLUG"];
            string cosmic_read_key = Configuration["AppSettings:COSMIC_READ_KEY"];
            var url = "https://api.cosmicjs.com/v1/{COSMIC_BUCKET_SLUG}/objects?pretty=true&hide_metafields=true&type=posts&read_key={COSMIC_READ_KEY}";

            url = url.Replace("{COSMIC_BUCKET_SLUG}", cosmic_bucket_slug);
            url = url.Replace("{COSMIC_READ_KEY}", cosmic_read_key);

            allPosts = await Http.GetFromJsonAsync<AllPost>(url);

            foreach (var post in allPosts.objects)
            {
                switch (post.Metadata.Type)
                {
                    case "Other":
                        other.Add(post);
                        all.Add(post);
                        break;
                    case "Machine Learning":
                        ml.Add(post);
                        all.Add(post);
                        break;
                    case "Game Development":
                        gmd.Add(post);
                        all.Add(post);
                        break;
                    case "logo":
                        logo = post.Metadata.hero.imgix_url;
                        break;
                }
            }
            SetFilter(0);
        }
        public class AllPost
        {
            public int limit { get; set; }
            public int total { get; set; }
            public Post[] objects { get; set; }
        }
        public class PostObject
        {
            public List<Post> _items { get; set; }
        }

        public void SetFilter(int i)
        {
            switch (i)
            {
                case 0:
                    filter = 0;
                    break;
                case 1:
                    filter = 1;
                    break;
                case 2:
                    filter = 2;
                    break;
                case 3:
                    filter = 3;
                    break;
            }
        }

        //private Animate myAnim;

        //private void RunAnimation()
        //{
        //    myAnim.Run();
        //}
}


